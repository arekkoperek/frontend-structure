@mixin font-face($name, $src, $eot: false, $weight: false, $style: false) {
    @font-face {
        font-family: $name;
        src: url('#{$src}.eot'); // IE9 compat
        src: url('#{$src}.eot?#iefix') format('embedded-opentype'), // IE8 and below
            url('#{$src}.woff') format('woff'), // standards
            url('#{$src}.ttf') format('truetype'); // Safari, Android, iOS

        font-style: $style;
        font-weight: $weight;
    }
}

@mixin cf {
    &:before,
        &:after {
        content:" ";
        display:table;
    }
    &:after {
        clear:both;
    }
}

@mixin font-size($sizeValue) {
    font-size: ($sizeValue * 10) + px;
    font-size: $sizeValue + rem;
}

@mixin size($width, $height) {
    width: $width;
    height: $height;
}

@mixin square($size) {
    @include size($size, $size);
}

@mixin text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin text-hide() {
    font: #{0/0} a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
}

@mixin tab-focus() {
    outline: thin dotted #333;
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}

@mixin absolute-center-h($height) {
    margin-top: -$height/2;
    position: absolute;
    top: 50%; 
}

@mixin absolute-center-w($width) {
    left: 50%;
    margin-left: -$width/2;
    position: absolute; 
}

@mixin absolute-center($width, $height) {
    height: $height;
    left: 50%;
    margin-left: -$width/2;
    margin-top: -$height/2;
    position: absolute;
    top: 50%;
    width: $width;  
}

@mixin center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

@mixin caret-base() {
    content: "";
    display: inline-block;
    width: 0;
    height: 0;
    vertical-align: middle;  
    border-color: transparent;
    border-style: solid;
}

@mixin caret($color, $size, $pos) {

    @if ($pos == right) {
        border-left:  $size solid $color;
        border-bottom-width: $size;
        border-top-width: $size;
        border-right-width: 0;
    }
    @if ($pos == left) {
        border-right:  $size solid $color;
        border-bottom-width: $size ;
        border-top-width: $size;
        border-left-width: 0;
    }
    @if ($pos == top) {
        border-bottom:  $size solid $color;
        border-left-width: $size;
        border-right-width:  $size;
        border-top-width: 0;
    }
    @if ($pos == bottom) {
        border-top:  $size solid $color;
        border-left-width: $size;
        border-right-width: $size;
        border-bottom-width: 0;
    }
} 

@mixin opacity($value: 0.5) {
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity= '$value * 100' )";
    filter: alpha(opacity= $value * 100 );
    zoom: 1;
}

@mixin vendor($property, $value, $prefixes ) {
    @each $prefix in $prefixes {
        -#{unquote($prefix)}-#{$property}: $value;
    }
    #{$property}: $value
}

@mixin transition($value) {
    @include vendor(transition, $value, webkit moz ms o);
}
@mixin border-radius($value: none) {
    @include vendor(border-radius, $value, webkit);
}

@mixin box-shadow($shadow...) {
    @include vendor(box-shadow, $shadow, webkit);
}

@mixin box-sizing($value: none) {
    @include vendor(box-sizing, $value, webkit moz);
}

@mixin rotate($degrees) {
    @include vendor(transform, rotate($degrees), webkit ms);
}

@mixin border-top-radius($radius) {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
}

@mixin rem($property, $values) {

    @at-root .no-cssremunit & {
        #{$property}: change-unit($values, px);
    }

    #{$property}: change-unit($values, rem); 

}

@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

@mixin transition-delay($string) {
    -webkit-transition-delay: $string;
    -moz-transition-delay: $string;
    -o-transition-delay: $string;
    transition-delay: $string;
}

@mixin transform($transform...) {
    -webkit-transform: $transform;
    -moz-transform: $transform;
    -o-transform: $transform;
    transform: $transform;
}

@mixin transform-origin($string) {
    -webkit-transform-origin: $string;
    -moz-transform-origin: $string;
    -o-transform-origin: $string;
    transform-origin: $string;
}

@mixin animation-name($string) {
    -webkit-animation-name: $string;
    -moz-animation-name: $string;
    -o-animation-name: $string;
    animation-name: $string;
}

@mixin animation-duration($string) {
    -webkit-animation-duration: $string;
    -moz-animation-duration: $string;
    -o-animation-duration: $string;
    animation-duration: $string;
}

@mixin animation-iteration-count($string) {
    -webkit-animation-iteration-count: $string;
    -moz-animation-iteration-count: $string;
    -o-animation-iteration-count: $string;
    animation-iteration-count: $string;
}

@mixin animation-timing-function($string) {
    -webkit-animation-timing-function: $string;
    -moz-animation-timing-function: $string;
    -o-animation-timing-function: $string;
    animation-timing-function: $string;
}

@mixin keyframes($name) {
    @keyframes #{$name} {
        @content;
    } 
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    } 
    @-o-keyframes #{$name} {
        @content;
    }
}

@mixin vendor($property, $value, $prefixes ) {
    @each $prefix in $prefixes {
        -#{unquote($prefix)}-#{$property}: $value;
    }
    #{$property}: $value
}

@mixin keyframes($name) {
    @-webkit-keyframes $name { @content; }
    @-moz-keyframes $name { @content; }
    @-ms-keyframes $name { @content; }
    @keyframes $name { @content; }
}

@mixin font-size ($sizeValue) {
    $remValue: $sizeValue;
    $pxValue: ($sizeValue * 10);
    font-size: #{$pxValue}px; 
    font-size: #{$remValue}rem; 
}
@mixin placeholder {
    ::-webkit-input-placeholder {@content}
    :-moz-placeholder           {@content}
    ::-moz-placeholder          {@content}
    :-ms-input-placeholder      {@content}  
}

@mixin selection {
    ::-moz-selection { @content; }
    ::selection { @content; }
}

@mixin media($size) {

    @if $size == desktop {
        @media (min-width: 1280px){
            @content;
        }
    } @else if $size == tablet {
        @media (min-width: 768px){
            @content;
        }
    } @else if $size == mobile {
        @media (min-width: 568px){
            @content;
        }
    } @else {
        @media (min-width: $size){
            @content
        }
    }

}
@mixin button($color, $background, $border) {
    color: $color;
    background-color: $background;
    @if($border != none)  {border-color: $border;}

    &:hover,
        &:focus,
        &:active {
        color: $color;
        background-color: darken($background, 5%);
        @if($border != none)  {border-color: darken($border, 5%);} 
    }

    &.is-turn-on {
        color: $color;
        background-color: darken($background, 15%);
        @if($border != none)  {border-color: darken($border, 15%);} 
    }

    &:active,
        &.is-turn-on {
        background-image: none;
    }
    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        &,
        &:hover,
            &:focus,
            &:active,
            &.is-turn-on {
            background-color: $background;
            @if($border != none)  {border-color: $border;}
        }
    }
}

@mixin button-size($padding, $font-size, $line-height) {
    padding: $padding;
    font-size: $font-size;
    line-height: $line-height;
}

@mixin form-control-focus($color: $input-border-focus) {
    $color-rgba: rgba(red($color), green($color), blue($color), .5);
    &:focus {
        border-color: $color;
        outline: 0;
        @include box-shadow(0 0 5px $color-rgba);
    }
}

@mixin inline-block {
    display: inline-block;
    zoom:1;
    *display: inline;
}